# -*- mode: ruby -*-
# vi: set ft=ruby :

disk1 = "disk.vdi"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.


Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/xenial64"
    config.disksize.size = "120GB"
    config.vm.provider "virtualbox" do |vb|
    vb.gui = true

    
    vb.memory = "5000"# Customize the amount of memory on the VM:
    vb.cpus = 3
    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
    vb.customize ["modifyvm", :id, "--usb", "on"]
    vb.customize ["modifyvm", :id, "--usbxhci", "on"]

    #config.vm.synced_folder "C:/shared", "/tmp/shared/"
    config.vm.synced_folder "C:\shared", "/tmp/shared/"

   end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL

createuser ()
{
    if [ ! -d /home/$1 ] ; then # if homedir for bda505 does not exist
        mkdir /home/$1 # create homedir for bda505
    fi


    if ! awk -F: '{ print $1 }' /etc/passwd | grep -qx $1;  then # if user bda 505 does not exist
        useradd $1 -s /bin/bash -c $1 # create user bda505 with bash as shell and bda505 as name
        usermod -a -G vboxsf $1
        echo "$1:$1" | chpasswd # change bda505 password
    fi

    if [ "`stat -c %G:%U /home/$1`" != "$1:$1" ]; then # if bda505:bda505 is not the owner of the home directory
        chown -R $1:$1 /home/$1 # make bda505 owner of its home dir, since it was created by root
    fi
}


## make ubuntu sudoer

echo "ubuntu:ubuntu" | chpasswd # change ubuntu password


## add necessary repos
if [ ! -e /etc/apt/sources.list.d/ubuntu-desktop-ubuntu-ubuntu-make-*.list ]; then
    add-apt-repository -y ppa:ubuntu-desktop/ubuntu-make ## for ubuntu-make for pycharm
fi

# update/upgrade
apt-get update
apt-get -y upgrade
apt-get -y dist-upgrade
apt-get -fy install
apt-get -y autoremove


# install requirements from apt
# net-tools for ifconfig
# apt-transport ... software-prop for docker-ce
# putty-tools for pscp
# libxml2-dev for tidyveres
# libpq-dev for rpostgresql
apt-get install -y \
    lxde sddm virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11 \
    gcc \
    geany \
    build-essential python3-dev python3-pip \
    python-dev python-pip r-base r-base-dev \
    postgresql postgresql-contrib pgadmin3 \
    git libssl-dev libcurl4-gnutls-dev curl libreoffice \
    vim screen tmux \
    openssh-client openssh-server pssh putty-tools \
    openvpn sendemail \
    net-tools nmap speedtest-cli htop \
    apt-transport-https \
    ca-certificates \
    software-properties-common \
    xclip \
    libxml2-dev \
    libpq-dev \
    jq mongodb \
    ubuntu-make


# install npm and tldr
curl -sL https://deb.nodesource.com/setup_6.x | bash -
apt-get install -y nodejs
npm install -g tldr


## create symbolic link to programs
if [ ! -e /usr/bin/pssh ]; then
    ln -s /usr/bin/parallel-ssh /usr/bin/pssh
fi

if [ ! -e /usr/bin/pscp ]; then
    ln -s /usr/bin/parallel-scp /usr/bin/pscp
fi

# restrict programs to root
which nmap | xargs chmod 700
which openvpn | xargs chmod 700
which sendemail | xargs chmod 700
which speedtest | xargs chmod 700
which parallel-ssh | xargs chmod 700
which parallel-scp | xargs chmod 700
which pssh | xargs chmod 700
which pscp | xargs chmod 700
which ncat | xargs chmod 700
which nc | xargs chmod 700
which nc.openbsd | xargs chmod 700


## configure sddm
sddm --example-config > /etc/sddm.conf # create empty conf
#sed -i 's/\(Session=\)$/\1lxde.desktop/' /etc/sddm.conf # select autologin de session
#sed -i 's/\(User=\)$/\1ubuntu/' /etc/sddm.conf # select autologin user
#sed -i 's/\(Relogin=\)false$/\1true/' /etc/sddm.conf # enable relogin


## select tr keymap
#echo "setxkbmap tr # change keyboard to turkish" >> /home/ubuntu/.bashrc 
if ! grep -qe "setxkbmap tr" /usr/share/sddm/scripts/Xsetup;
then
    echo "setxkbmap tr # change keyboard to turkish" >> /usr/share/sddm/scripts/Xsetup
fi

if ! grep -qe "setxkbmap tr" /home/ubuntu/.bashrc;
then
    echo "setxkbmap tr # change keyboard to turkish" >> /home/ubuntu/.bashrc
fi
    
if ! grep -qe "setxkbmap tr" /home/bda505/.bashrc;
then
    echo "setxkbmap tr # change keyboard to turkish" >> /home/bda505/.bashrc
fi

## enable sddm
systemctl enable sddm.service
systemctl start sddm.service

## leave only 1 desktop
perl -pi -e 's/<number>.*<\/number>/<number>1<\/number>/g' /usr/share/lubuntu/openbox/rc.xml
perl -pi -e 's/<number>.*<\/number>/<number>1<\/number>/g' /home/*/.config/openbox/lubuntu-rc.xml


# if not exists install gdrive
if [ ! -e /usr/local/bin/gdrive ]; then
    wget -O gdrive https://docs.google.com/uc?id=0B3X9GlR6EmbnQ0FtZmJJUXEyRTA&export=download
#wget -O gdrive https://drive.google.com/uc?id=0B3X9GlR6Embnb095MGxEYmJhY2c
    install gdrive /usr/local/bin/gdrive
fi

## if not exists
## install pycharm-educational and create a symlink to path
if [ ! -e /usr/local/share/umake/ide/pycharm-educational/bin/pycharm.sh ]; then 
    umake ide pycharm-educational /usr/local/share/umake/ide/pycharm-educational
    ln -s /usr/local/share/umake/ide/pycharm-educational/bin/pycharm.sh /usr/bin/pycharm
fi

# install docker-ce ifnot installed yet
if ! dpkg -s docker-ce 2>/dev/null | grep -qe "install ok installed"; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    apt-key fingerprint 0EBFCD88
    add-apt-repository -y \
        "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) \
        stable"
    apt-get update
    apt-get install -y docker-ce
    echo -e '{\n"storage-driver": "overlay2"\n}' > /etc/docker/daemon.json # select overlay2 as storage driver
fi

## install jupyter notebook and python2/3 kernels
pip3 install --upgrade pip
pip3 install jupyter
python3 -m pip install ipykernel
python3 -m ipykernel install

python2 -m pip install ipykernel
python2 -m ipykernel install

## install rstudio if not installed yet
if dpkg -l | grep -q rstudio
then
    :
else
    rslink=$(curl https://www.rstudio.com/products/rstudio/download/ | grep xenial | grep -o "https.*deb")
    rsdeb=$(echo $rslink | grep -o "rstudio-.*")
    wget $rslink
    dpkg -i $rsdeb
    rm $rsdeb
    apt-get -fy install
fi

#if [ ! -e /etc/sudoers.d/ubuntu ]; then # if file for meflabadmin under sudoers does not exist
#    echo "ubuntu ALL=(ALL) ALL" > /etc/sudoers.d/ubuntu # create the file
#fi


## create bda505 home folder and user

if [ ! -d /home/bda505 ] ; then # if homedir for bda505 does not exist
    mkdir /home/bda505 # create homedir for bda505
fi


if ! awk -F: '{ print $1 }' /etc/passwd | grep -qx bda505;  then # if user bda 505 does not exist
    useradd bda505 -s /bin/bash -c bda505 # create user bda505 with bash as shell and bda505 as name
    usermod -a -G vboxsf bda505
    echo "bda505:bda505" | chpasswd # change bda505 password
fi

if [ "`stat -c %G:%U /home/bda505`" != "bda505:bda505" ]; then # if bda505:bda505 is not the owner of the home directory
    chown -R bda505:bda505 /home/bda505 # make bda505 owner of its home dir, since it was created by root
fi

echo "bda505:bda505" | chpasswd # change bda505 passwd

course_codes=(
"bda507"
"bda501"
"bda503"
)

for i in "${course_codes[@]}";
    do createuser $i;
done

## change to home directroy of bda505
#cd /home/bda505

# add crontab job to flush /etc/hosts if not yet exists
lines="@reboot sed -i '/clusterdock/d' /etc/hosts"
if ! crontab -u root -l | grep -q "$lines"; then
    (crontab -u root -l ; echo "$lines") | crontab -u root -
fi

# add crontab job to upgrade
lines="@reboot sleep 60; apt-get update; apt-get -y upgrade; apt-get -y dist-upgrade; apt-get -fy install; apt-get -y autoremove"
if ! crontab -u root -l | grep -q "$lines"; then
    (crontab -u root -l ; echo "$lines") | crontab -u root -
fi

# add crontab job to add script directories if not yet exists
lines="@reboot sleep 60; git -C /home/bda505/mef-bigdata reset --hard HEAD; git -C /home/bda505/mef-bigdata pull origin master"
if ! crontab -u bda505 -l | grep -q "$lines"; then
    (crontab -u bda505 -l ; echo "$lines") | crontab -u bda505 -
fi

## install bash kernel for jupyter
pip install bash_kernel
python -m bash_kernel.install


## commands as bda505 user
## create data directories
## download data, etc

sudo -i -u bda505 /bin/bash - <<EOF
cd /home/bda505


# add clipboard aliases if not exists yet

if [ ! -e /home/bda505/.bashrc ]; then # if file for .bashrc does not exist yet
    touch /home/bda505/.bashrc # create the file
fi

alias_lines=(
"alias xclipv='xclip -selection clipboard -o' # stdin to clipboard"
"alias xclipc='xclip -selection clipboard' # clipboard to stdout"
)

printf "%s\n" "\${alias_lines[@]}"


for j in "\${alias_lines[@]}";
    do 
        if ! grep -q "\$j" /home/bda505/.bashrc ; then
            echo "\$j" >> /home/bda505/.bashrc
        fi
done

. /home/bda505/.bashrc


## create mef directory if not exists

if [ ! -d /home/bda505/mef ] ; then
    mkdir /home/bda505/mef
fi


## clone mef-bigdata repo if not exists
if [ ! -d /home/bda505/mef-bigdata ] ; then
    git clone https://github.com/serhatcevikel/mef-bigdata.git /home/bda505/mef-bigdata
fi


## create data directory for week 1 
if [ ! -d /home/bda505/mef/01 ] ; then
    mkdir /home/bda505/mef/01
fi

EOF


## install R kernel for jupyter
R --vanilla <<HERE
    cranlist <- c("devtools", "data.table", "rmarkdown", "microbenchmark",
                    "RPostgreSQL", "sqldf", "RMongo")

    githublist <- rbind(
                        c("IRkernel", "IRkernel/IRkernel"),
                        c("tidyverse", "tidyverse/tidyverse")
                        )

    mirid <- match("tr", getCRANmirrors()[,8])
    chooseCRANmirror(graphics=FALSE, ind=mirid)

    ## cran packages
    for (package in cranlist)
    { 
        if (!require(package, character.only = T, quietly = T))
        {
            install.packages(package)
        }
    }

    ## install IR kernel
    if (!require('IRkernel', character.only = T, quietly = T)) {
        devtools::install_github('IRkernel/IRkernel')
        IRkernel::installspec(user = FALSE)
    }

    ## github packages
    for (package in 1:nrow(githublist))
    { 
        if (!require(githublist[package,1], character.only = T, quietly = T))
        {
            devtools::install_github(githublist[package,2])
        }
    }

q()
HERE

SHELL

end
